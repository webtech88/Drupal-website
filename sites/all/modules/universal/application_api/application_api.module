<?php



/**
 * Implements hook_help().
 */
function application_api_help($path, $arg) {
  switch ($path) {
    case 'admin/help#application':
      $output = '';
      $output .= '<p>' . t('Application main module') . '</p>';
      return $output;
  }
}


/**
 * Revert specified features.
 */
function application_api_features_revert($modules) {
  module_load_include('inc', 'features', 'features.export');
  features_include();
  foreach ($modules as $module) {
    $components = array();
    if (($feature = feature_load($module, TRUE)) && module_exists($module)) {
      // Forcefully revert all components of a feature.
      foreach (array_keys($feature->info['features']) as $component) {
        if (features_hook($component, 'features_revert')) {
          $components[] = $component;
        }
      }
    }
    foreach ($components as $component) {
      features_revert(array($module => array($component)));
    }
  }
}

/**
 * Load new translations from .po files.
 */
function application_api_update_translations($language = 'pl') {
  include_once './includes/locale.inc';
  // Add language
  //locale_add_language('pl', 'Polish', 'Polski', LANGUAGE_LTR, '', '', TRUE, TRUE);
  // Load translations.
  $files = file_scan_directory('sites/all', '/' . $language . '.po/');
  foreach ($files as $file) {
    $file->filepath = $file->filename;
    _locale_import_po($file, $language, LOCALE_IMPORT_KEEP, 'default');
  }
}

/**
 * Implements hook_menu_alter().
 */
function application_api_menu_alter(&$items) {
  $paths = variable_get('application_api_paths_to_remove', array()); //@TODO - create configuration form.
  $front = variable_get('site_frontpage', 'node');
  //drupal_set_message('$front: ' . $front );
  if ($front != 'node') {
    $paths[] = 'node';
  }
  // Add other paths to remove.
  // ...
  if ($paths) {
    foreach ($paths as $path) {
      unset($items[$path]);
    }
  }
}


/**
 * Placeholder for application settings page.
 */
function application_api_admin_page_links($base_path, $title) {
  $output = $title;
  $result_parent = db_select('menu_links', 'm')
    ->fields('m')
    ->condition('menu_name', 'management', '=')
    ->condition('link_path', $base_path, '=')
    ->execute()
    ->fetchAssoc();

  $mlid = $result_parent['mlid'];
  $result_childrens = db_select('menu_links', 'm')
    ->fields('m')
    ->condition('plid', $mlid, '=')
    ->execute();
  foreach ($result_childrens as $child_item) {
    if ($router_item = menu_get_item($child_item->link_path)) {
      if ($router_item['access']) {
        $output .= '<p>' . l($child_item->link_title, $child_item->link_path) . '</p>';
      }
    }

  }

  return $output;
}

/**
 * Check if user has role.
 *
 * @param $account
 * @param $roles
 * @return bool
 */
function application_api_user_has_roles($account, $roles) {
  if (is_numeric($account)) {
    $account = user_load($account);
  }

  return !!count(array_intersect(is_array($roles)? $roles : array($roles), array_values($account->roles)));
};

